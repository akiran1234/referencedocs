**************************** Git Architecture **********************************************************************
working dir --> Staging Area--> git local repository--> git remote repository (github)

********************************************************************************************************************
git --version 	# will display the git version
# config command used to configure user information for git repository.
git config --global user.name "Kiran Achanta Local"  # Set user name  for commit transaction
git config --global user.email "akiran@gmail.com"    # Set email for commit transactions
git config --list  # Displays all the config/environment variables set for the repository.
********************************************************************************************************************
git help config    # Will list the information of the command like man command in Linux.
git help init      # will display the information/usage of init command.

git init           # Will create .git directory as  local repository in current working directory. Here after git will start tracking new/modifie files in current working directory.
rm -rf .git        # To remove the local git repository and git stops tracking the files.
.gitignore         # This file will be created by user.The files listed in .gitignore will stop tracking from working directory.
touch .gitignore;  # Creating .gitignore file. I have mentioned test1 test2 files in this file. Now git stops tracking test1 and test2 from tracking current working dir of local repository.
********************************************************************************************************************
git add filename   # To add a file/files in to git staging area.
git add .          # To add all the files to staging Area.
git reset filename # To un stage the selcted file from staging Area.(Reverting Uncommitted Changes)
git reset 	   # This command will unstage all the files from staging Area
git commit -m "Commit message" # This will commit the staging files to local Repo.
git commit --amend -m "commit message" # This will amend the last commit message.
git log  	   # Will display the commit logs of the repo (Commit Id, Commit User etc..)
git log  --oneline # This will show the commits in one line
git log --author="Kiran" # Filter log with 
git diff filename # This will list the difference (modificaton) between current file and already commited file.
Ex; sample.txt --> Already commited in repo
    sample.txt --> Modified locally; git status--> Will tell modified.
git diff sample.txt: will give the diff b/w commited file in repo and local file.
git diff --staged sample.txt: will give the diff b/w Staging Area file  and local file.
git rm sample.txt: This will delete the file from repository aswell as local copy.Post this command commit is mandatory.
git commit -m "Deleted sample.txt from Repo and Local copy".
git ls-tree -r master --name-only # To list files in the local repo not that important because we have local copy.
git mv kiran.txt kumar.txt # This will rename the file both in repo and local copy. Post this command commit is mandatory.
git commit -m "Renamed file Kiran to Kumar"
git mv sample.txt /home/devops/gitprojects/folder2/ # This will move sample.txt to folder2.
git commit -am "This will  directly commit" # This command with -am will commit all the files to repository in one go with adding the files to staging area. 
               # -am works only for the files already added in repo and not for new files.
git rm         # To remove file from git repo. Post this commit is mandatory

git stash       # Save the changes of the current working dir for time being without commiting and make the working dir clean.
git stash apply # used to bring back the saved changes onto the working directory.
git stash drop  # to un stash the saved changed from the working directory.

################################# git checkout ###############################################################################
# Checkout has 3 primary functionalities 
1. Go back to previous snapshot/state  # git checkout --comit-id filename 
2. Discard the changes of file in CWD  # git checkout filename
3. Switch between branches             # git checkout branchname

git checkout --comit-id filename # This will bring it back to previous version head by pointing to that hash id i.e repo at that snapshot.
git checkout - # Will switch back last checkout branch and detaches the head and points back to last commit id.
git checkout file # This will discard the changes of file in git working dir. This file should already exist in git repo.
                  # We have added a new line and git tracks this change. using git checkout file: this changes can be discarded.
git show commi_id # this will show what changes have been done for that commit.

################################# git revert & git rest  ############################################################################

git revert: Using this command we can go back to previous commit and any conflicts in revert has to be removed.
            (A->B->C) # Now let say we want to go back to previous commit B then
git revert commitid(B)# This will create a new commit id D with B snapshot.
                      # Now this will become (A->B->C->D) and D is the new commit with exact snapshot of B.

git reset:Let us we want to delete the commit history from certain point of commit.
	   (A->B->C->D->E)
Now I want to go back to commit id B and remove other commit id’s (C, D, E).
git reset –hard commit-id of B: # This will reset back to commit id B and B will be the latest commit and C,D,E will be discarded.

Merge vs rebase:
Merge will create an additional commit id in the merged branch (Usually Master).
rebase will not create any additonal commits insted it will shift (rebase) the commit id's to rebased branch (Usually Master).
In essance rebase will have clean history of the commit history in the master branch.

git squashing          # Grouping series of commits into one commit is called squashing.
git rebase -i HEAD~N   # Rebase is used to squash last 'N' commits into one commit.
                       # This will openup editor and change pick to squash.

git barerepository     # Bare repo is used for sharing and collaborating with multiple develpers. Files in bare repo cannot be edited.
git diff-tree -r {hash} # find a list of files that has changed in a particular commit

git cherry pick: 

################################# git bisect #######################################################################################################
git biseect is used to identify a bad commit from the range of good commit and bad commit.

git bisect start
git bisect bad  commitid  # give the commit id where the code is not working fine
git bisect good commitid  # give the commit id where the code is working fine.



###### Uploading Local Repo to github #####################
1. Create Local Repo with git init
2. Add the files(git add .) and commit to Local repo (git commit -m "Message")
3. git remote add test1 https://github.com/akiran1234/gittest.git (test1 is nickname for the URL)
4. git remote   # This will display the list of remote connections to git hub.
5. git push -u test1 master  # This will push all the files in local repo to git hub.
6. By giving above command it will prompt for git hub credentials then files will be uploaded to github.

git init --bare gittest.git 	# This will create a  bare repository locally from the github repo.
For a bare repositroy there wont be any working tree and hence we cannot add any files to local repo.
Note: git pull is the thumb rule before pushing the changes to remote repo.
git pull remotename branchname
https://help.github.com/articles/fetching-a-remote/
############### branching ######################################
git branch feature1   # This will create new brach in git repo and this repo is of from the base brach where we create new brach.
git branch            # This will show the list of available branches.
git checkout feature1 # This will switch to feature1 branch for operations.
git branch -d branch_name # This will delete the local branch.
git push origin --delete branch_name # Delete the remote branch.

git branch --merged    # This will list the branches that is been merged with the master branch.
git branch --no-merged # List the branches that are not merged.


############### git vs svn #############################################################################
1. git is decentralised svn is centralised version control
2. git is high available (repositories exist on all developer machines) svn is single point of failure.
3. git cannot handle large files svn can handle large and small file efficently.
4. git will have only one .git dir per repo and svn will have .svn for all the folders in repo. 
4. git will have master branch svn will have trunk (master branch in git).
	















